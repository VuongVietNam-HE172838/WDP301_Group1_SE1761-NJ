import React, { useEffect, useState } from "react";
import axios from "axios";
import { Table, Button, Form, Modal } from "react-bootstrap";

const ManageCategory = () => {
  const [categories, setCategories] = useState([]);
  const [editedCategory, setEditedCategory] = useState(null); // L∆∞u danh m·ª•c ƒëang ch·ªânh s·ª≠a
  const [newCategoryName, setNewCategoryName] = useState(""); // L∆∞u t√™n danh m·ª•c m·ªõi
  const [showAddModal, setShowAddModal] = useState(false); // ƒêi·ªÅu khi·ªÉn modal th√™m danh m·ª•c

  useEffect(() => {
    fetchCategories();
  }, []);

  const fetchCategories = async () => {
    try {
      const response = await axios.get("http://localhost:9999/menu/menu");
      setCategories(response.data);
    } catch (error) {
      console.error("L·ªói khi l·∫•y danh m·ª•c:", error);
    }
  };

  const handleEdit = (id, name) => {
    setEditedCategory({ id, name });
  };

  const handleCancel = () => {
    setEditedCategory(null); // H·ªßy ch·ªânh s·ª≠a
  };

  const handleUpdate = async () => {
    if (!editedCategory || !editedCategory.name.trim()) {
      alert("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      return;
    }

    const updatedData = { name: editedCategory.name };

    // Ki·ªÉm tra ID tr∆∞·ªõc khi g·ª≠i
    if (!editedCategory.id || editedCategory.id.length !== 24) {
      console.error("‚ùå ID kh√¥ng h·ª£p l·ªá!");
      alert("L·ªói: ID kh√¥ng h·ª£p l·ªá.");
      return;
    }

    console.log("üî• ƒêang g·ª≠i d·ªØ li·ªáu c·∫≠p nh·∫≠t:", updatedData);
    console.log("ID danh m·ª•c ƒëang c·∫≠p nh·∫≠t:", editedCategory.id);  // Ki·ªÉm tra gi√° tr·ªã ID

    try {
      const response = await axios.put(
        `http://localhost:9999/menu/category/${editedCategory.id}`,
        updatedData,
        {
          headers: { "Content-Type": "application/json" }
        }
      );

      console.log("‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng:", response.data);
      fetchCategories(); // C·∫≠p nh·∫≠t danh s√°ch m·ªõi
      setEditedCategory(null); // Reset tr·∫°ng th√°i
    } catch (error) {
      console.error("‚ùå L·ªói khi c·∫≠p nh·∫≠t danh m·ª•c:", error.response ? error.response.data : error.message);
      alert("L·ªói khi c·∫≠p nh·∫≠t, vui l√≤ng ki·ªÉm tra l·∫°i.");
    }
  };

  const handleDelete = async (id) => {
    if (window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a danh m·ª•c n√†y kh√¥ng?")) {
      try {
        await axios.delete(`http://localhost:9999/menu/category/${id}`);
        fetchCategories(); // Load l·∫°i danh s√°ch sau khi x√≥a
      } catch (error) {
        console.error("L·ªói khi x√≥a danh m·ª•c:", error);
      }
    }
  };

  const handleAddCategory = async () => {
    if (!newCategoryName.trim()) {
      alert("T√™n danh m·ª•c kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!");
      return;
    }
  
    const userId = localStorage.getItem("userId"); // Ho·∫∑c t·ª´ token JWT n·∫øu l∆∞u trong ƒë√≥
    const isAdmin = localStorage.getItem("role") === "admin"; // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng l√† admin
    
    // N·∫øu kh√¥ng ph·∫£i admin, g√°n userId v√†o created_by, n·∫øu l√† admin th√¨ g√°n "admin"
    const createdBy = isAdmin ? "admin" : userId;
    
    const newCategory = { 
      name: newCategoryName,
      created_by: createdBy,
      updated_by: createdBy, // C≈©ng c√≥ th·ªÉ g√°n l√† userId ho·∫∑c "admin" t√πy nhu c·∫ßu
    };
  
    try {
      const response = await axios.post("http://localhost:9999/menu/category", newCategory);
      console.log("‚úÖ Th√™m danh m·ª•c th√†nh c√¥ng:", response.data);
      fetchCategories(); // C·∫≠p nh·∫≠t danh s√°ch danh m·ª•c
      setNewCategoryName(""); // Reset t√™n danh m·ª•c
      setShowAddModal(false); // ƒê√≥ng modal
    } catch (error) {
      console.error("‚ùå L·ªói khi th√™m danh m·ª•c:", error);
      alert("L·ªói khi th√™m danh m·ª•c.");
    }
  };
  
  
  

  return (
    <div className="container">
      <h2 className="text-center my-3">Qu·∫£n l√Ω Danh m·ª•c</h2>

      {/* N√∫t Th√™m danh m·ª•c */}
      <Button variant="primary" onClick={() => setShowAddModal(true)} className="mb-3">
      Add New Category
      </Button>

      {/* Modal th√™m danh m·ª•c */}
      <Modal show={showAddModal} onHide={() => setShowAddModal(false)}>
        <Modal.Header closeButton>
          <Modal.Title>Add New Category</Modal.Title>
        </Modal.Header>
        <Modal.Body>
          <Form.Group>
            <Form.Label>Name Category</Form.Label>
            <Form.Control
              type="text"
              placeholder="Nh·∫≠p t√™n danh m·ª•c"
              value={newCategoryName}
              onChange={(e) => setNewCategoryName(e.target.value)}
            />
          </Form.Group>
        </Modal.Body>
        <Modal.Footer>
          <Button variant="secondary" onClick={() => setShowAddModal(false)}>
            H·ªßy
          </Button>
          <Button variant="primary" onClick={handleAddCategory}>
            Th√™m
          </Button>
        </Modal.Footer>
      </Modal>

      <Table striped bordered hover responsive>
        <thead>
          <tr>
            <th>ID</th>
            <th>Namee Category</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody>
          {categories.map((category) => (
            <tr key={category._id}>
              <td>{category._id}</td>
              <td>
                {editedCategory?.id === category._id ? (
                  <Form.Control
                    type="text"
                    value={editedCategory.name}
                    onChange={(e) =>
                      setEditedCategory({ ...editedCategory, name: e.target.value })
                    }
                  />
                ) : (
                  category.name
                )}
              </td>
              <td>
                {editedCategory?.id === category._id ? (
                  <>
                    <Button variant="success" onClick={handleUpdate} className="mr-2">
                      Save
                    </Button>
                    <Button variant="secondary" onClick={handleCancel}>
                      Cancel
                    </Button>
                  </>
                ) : (
                  <>
                    <Button variant="warning" onClick={() => handleEdit(category._id, category.name)} className="mr-2">
                      Edit
                    </Button>
                    <Button variant="danger" onClick={() => handleDelete(category._id)}>
                      Delete
                    </Button>
                  </>
                )}
              </td>
            </tr>
          ))}
        </tbody>
      </Table>
    </div>
  );
};

export default ManageCategory;
